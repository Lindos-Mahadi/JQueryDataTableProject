@model IEnumerable<JqueryDataTableProject.Helper.TimeSessionViewModel>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StartTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EndTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserTimeZoneId)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StartTime)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EndTime)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UserTimeZoneId)
            </td>
            @* <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td> *@
        </tr>
}
    </tbody>
</table>
@section Scripts {
    <script>
        $(document).ready(function () {
            getUserTimeZoneId();
        });
        function getUserTimeZoneId() {
            // Use the Intl API to get the time zone
            const userTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;

            // Set a cookie named 'userTimeZoneId' with the user's time zone ID
            document.cookie = `userTimeZoneId=${encodeURIComponent(userTimeZone)}; expires=${getCookieExpiration()}; path=/`;

            console.log("userTimeZone", userTimeZone);
        }

        // Function to get cookie expiration date (one day from the current date)
        function getCookieExpiration() {
            const expirationDate = new Date();
            expirationDate.setDate(expirationDate.getDate() + 30); // Set expiration to one day from now
            return expirationDate.toUTCString();
        }


    </script>
}
